<?xml version="1.0" encoding="UTF-8"?>
<extensionAttribute>
<displayName>Version Adobe Camera Raw CC</displayName>
<description>Determines if a product is at least a specified Version by reading a Key from a property list at a specific path.</description>
<dataType>string</dataType>
<scriptContentsMac>#!/usr/bin/python&#13;
&#13;
"""&#13;
Determines if a product is at least a specified Version by reading a Key from a property list at a specific path.&#13;
The Key in the property list file may be specified to obtain the product's version.&#13;
Typically the Key is 'CFBundleShortVersionString' or 'CFBundleVersion', although a custom Key may be specified.&#13;
Results may (optionally) be limited to a range, when the property list is used for multiple major releases of the product.&#13;
Returns 'Older' if an older version of the product is found.&#13;
Returns 'Equal' if the same version of a product is found.&#13;
Returns 'Newer' if a newer version of the product is found.&#13;
Returns 'N/A' if the product is not found.&#13;
"""&#13;
&#13;
# Path to plist to read version key from [required]&#13;
Plist = '/Library/Application Support/Adobe/Plug-Ins/CC/File Formats/Camera Raw.plugin/Contents/Info.plist'&#13;
# Key in plist to read version string from [required]&#13;
Key = 'CFBundleVersion'&#13;
# Version to test for [required]&#13;
Version = '9.4f548'&#13;
# Range limit for plist version [optional]&#13;
# Range = ['MIN', 'MAX']&#13;
&#13;
# Required modules&#13;
from os import devnull&#13;
from os.path import isabs, isfile&#13;
from pkg_resources import parse_version&#13;
from re import sub&#13;
from subprocess import check_output&#13;
&#13;
# Read Key's Value as String from Plist&#13;
def read_plist(p, k):&#13;
	with open(devnull, 'w') as DEVNULL:&#13;
		try:&#13;
			v = check_output(['/usr/bin/defaults', 'read', p, k], stderr=DEVNULL).rstrip()&#13;
		except:&#13;
			v = ''&#13;
	return v&#13;
&#13;
# Rationalise Version String&#13;
def rationalise_version(v):&#13;
	# Convert to lowercase&#13;
	v = v.lower()&#13;
	# Remove leading non-numeric characters&#13;
	v = sub('^[^0-9]*', '', v)&#13;
	# Remove trailing spaces&#13;
	v = sub(' *$', '', v)&#13;
	# Replace commas with periods&#13;
	v = sub(',', '.', v)&#13;
	# Remove 'dodgy' characters&#13;
	v = sub('[^a-z0-9 .-]', '', v)&#13;
	return v&#13;
&#13;
# Compare Version Strings&#13;
def compare_versions(v1, v2):&#13;
	if (parse_version(v1) &lt; parse_version(v2)):&#13;
		r = 'Older'&#13;
	elif (parse_version(v1) == parse_version(v2)):&#13;
		r = 'Equal'&#13;
	elif (parse_version(v1) &gt; parse_version(v2)):&#13;
		r = 'Newer'&#13;
	return r&#13;
&#13;
# Version in Range&#13;
def version_in_range(v, r):&#13;
	r = parse_version(r[1]) &gt; parse_version(v) &gt;= parse_version(r[0])&#13;
	return r&#13;
&#13;
# Initialise variables&#13;
try:&#13;
	Plist&#13;
except:&#13;
	print '&lt;result&gt;Error: Plist path not defined&lt;/result&gt;'&#13;
	exit(1)&#13;
try:&#13;
	Key&#13;
except:&#13;
	print '&lt;result&gt;Error: No Key specified&lt;/result&gt;'&#13;
	exit(1)&#13;
try:&#13;
	Version&#13;
except:&#13;
	print '&lt;result&gt;Error: No Version specified&lt;/result&gt;'&#13;
	exit(1)&#13;
try:&#13;
	Range&#13;
except:&#13;
	Range = None&#13;
&#13;
# Validate Plist&#13;
if (not isabs(Plist)):&#13;
	print '&lt;result&gt;Error: Plist path is invalid&lt;/result&gt;'&#13;
	exit(1)&#13;
&#13;
# Validate Version&#13;
Version = rationalise_version(Version)&#13;
if (Version == ''):&#13;
	print '&lt;result&gt;Error: Version is invalid&lt;/result&gt;'&#13;
	exit(1)&#13;
&#13;
# Validate Range&#13;
if (Range):&#13;
	if (len(Range) != 2):&#13;
		print '&lt;result&gt;Error: Range requires two values&lt;/result&gt;'&#13;
		exit(1)&#13;
	else:&#13;
		Range[0] = rationalise_version(Range[0])&#13;
		if (Range[0] == ''):&#13;
			print '&lt;result&gt;Error: Range minimum is invalid&lt;/result&gt;'&#13;
			exit(1)&#13;
		Range[1] = rationalise_version(Range[1])&#13;
		if (Range[1] == ''):&#13;
			print '&lt;result&gt;Error: Range maximum is invalid&lt;/result&gt;'&#13;
			exit(1)&#13;
		if (compare_versions(Range[0], Range[1]) != 'Older'):&#13;
			print '&lt;result&gt;Error: Range minimum is greater than maximum&lt;/result&gt;'&#13;
			exit(1)&#13;
		if (version_in_range(Version, Range) == False):&#13;
			print '&lt;result&gt;Error: Version is not within Range&lt;/result&gt;'&#13;
			exit(1)&#13;
&#13;
# Check Installed Version&#13;
if (not isfile(Plist)):&#13;
	Result = 'N/A'&#13;
else:&#13;
	Installed = read_plist(Plist, Key)&#13;
	Installed = rationalise_version(Installed)&#13;
	if (Installed == ''):&#13;
		Result = 'Error: Reading installed version'&#13;
	else:&#13;
		Result = compare_versions(Installed, Version)&#13;
		if (Range):&#13;
			if (version_in_range(Installed, Range) == False):&#13;
				Result = 'N/A'&#13;
&#13;
# Output Result&#13;
print '&lt;result&gt;' + Result + '&lt;/result&gt;'&#13;
exit(0)</scriptContentsMac>
<scriptContentsWindows/>
</extensionAttribute>
